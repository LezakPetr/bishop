
#ifndef _BISHOP_BASE_LINE_INDEXER_H_
#define _BISHOP_BASE_LINE_INDEXER_H_


#include "bit_board.h"
#include "square.h"
#include "cross_direction.h"
#include "file_rank_offset.h"

#include <cstdint>


namespace bishop::base {
	/**
	 * 
	 * @author Ing. Petr Ležák
	 */
	class LineIndexer {
		public:
			typedef uint32_t IndexType;

			// Last index generated by the indexer + 1.
			// The terms are (count of depth << depth).
			static constexpr IndexType LAST_INDEX = (44 << 5) + (4 << 6) + (12 << 7) + (4 << 9) + (36 << 10) + (24 << 11) + (4 << 12);

			static constexpr int DIRECTIONS_IN_CROSS = 4;
			static const FileRankOffset DIRECTION_OFFSETS[CrossDirection::LAST][DIRECTIONS_IN_CROSS];

		private:
			typedef uint8_t ShiftType;

			struct Cell {
				BitBoard::Type mask;
				BitBoard::Type coeff;
				IndexType base;
				ShiftType shift;

				inline IndexType calculateIndex (const Square::Type square, const BitBoard::Type occupancy) const {
					return base + (IndexType) (((occupancy & mask) * coeff) >> shift);
				}
			};

			static constexpr int TABLE_SIZE = 2 * Square::LAST;

			static const BitBoard::Type COEFF_TABLE[CrossDirection::LAST][Square::LAST];
			static const ShiftType DEPTHS[CrossDirection::LAST][Square::LAST];

			
	
			static Table<LineIndexer::TABLE_SIZE, LineIndexer::Cell, Square::BIT_COUNT, 0> table;
	
		public:
			static BitBoard::Type calculateDirectionMask (const CrossDirection::Type direction, const Square::Type square);
	
			/**
			 * Returns line index of given cross from given square with given occupancy.
			 * @param direction cross direction
			 * @param square begin square
			 * @param occupancy occupancy mask
			 * @return line index
			 */
			static inline IndexType getLineIndex (const CrossDirection::Type direction, const Square::Type square, const BitBoard::Type occupancy) {
				return table(direction, square).calculateIndex(square, occupancy);
			}
	
			static inline BitBoard::Type getDirectionMask(const CrossDirection::Type direction, const Square::Type square) {
				return table(direction, square).mask;
			}
	};
}

#endif

